対応の原則 全てのものは自身でない別のものと対応づけられる
置換の原則 全てのものは自身と互換のあるものと置換されることがある
発散の原則 全てのものは自身を1単位として別の位に発散することがある

全ての物質は以上の原則に従い、他のどんな原理も以上の組み合わせで説明可能である。

また、ある限定区間においては物質のみならず人の意識や高次元においても成立する。

魂を定義できないものとした時、肉体で現れる人格及び意識を魂の動作の対応とする。

その場合において、魂は指向性(思考性)と説明される。

魂はトップレベル定義自体であるため、評価に関しての対応(演算結果<-式)、または動作の表現は対応よって説明されるが、対応そのものである魂はについては定義することができない。

しかし、その形態については一本の線であると仮の定義を与えることはできる。

線はすなわち対応そのものであり、線は表現として質量を持たず、何かを結びつけ明らかにするものであるため、これを光と定義しても構わない。

ここにおいて対応が視点(または観測者)によって指向性が見出されることがあることに注意すべきである。対応は等価か方向か接続か説明か表現か集合か隔離か、
その他、複数の表現に収束するいち万能視点である。

以下は以上の推論から発生したプログラミング言語の規定である。

全ての表現は一対一対応する。

一対一対応を行なった時、一連の流れへと収束するべきかは処理系で判断しても良い。

述語は主語(名詞)と対応しなければならない。

値は計算(継続)と対応しなければならない。

計算は評価と等価でなくてはならない。

命令として提供されるべき要素は、発見(正規表現)、対応(要素定義)、置換(要素の交換)である。

置換は対応の組み合わせで表現できるため、発見と対応以外の実装は不要である。

発見は新たな対応の作成も兼ねる。
対応は計算や評価、出力を兼ねる。
置換は継続を兼ねる。

全ては対応表にまとめられる。

1+1の計算は以下の対応である。

1 1
2 2
+ +
1+1 2

空白は=記号と表現しても良い。
一行にまとめる際、ピリオドを使っても良い。
+は"足し算"など説明に対応させても良い。

対応の適用順序はとても重大なことなので実装系に便利な命令をふんだんに組み込んでも良い。

対応は独自の正規表現を用いても良い。